#!/bin/bash
#
# Title: update_dns
#
# Description:
#   Update DuckDNS (https://www.duckdns.org/) with our current IP address.
#   A user token is needed for this service.
#
# Credits:  None
#
# Usage:
#   Either source this script and call updatedns().
#    or
#   Call this script directly with the message as first argument.
#
#   In either case, an IP address can be given as the first argument. If no IP
#   is given, DuckDNS detect the IP address. If an IP is given, that is passed
#   in the call to the service.
#
#   An environment variable must exist and be non-empty:
#     DUCKDNS_TOKEN - the token used to identify the DuckDNS user;
#   If these are not set, the script exits and no push message is sent.
#
# Maintainer: dr.j.osborne@gmail.com
#
# License: MIT, see LICENSE file in repository root
#

: "${DUCKDNS_TOKEN:?DUCKDNS_TOKEN env var must be set to use DuckDNS service}"

# [#1 - Domain]
# [#2 - IP address]
function updatedns()
{
    # Check we've been supplied with two parameters
    : ${2?"Usage: $0 <domain> <ip address>"}

    local DOMAIN=$1
    local IPADDR=$2
    local RET_VALUE

    #TODO: What if these aren't set to reasonable values?
    [[ -n "$DOMAIN" ]] && DMSTR="domains=$DOMAIN"
    [[ -n "$IPADDR" ]] && IPSTR="&ip=$IPADDR"

    DNS_RET=$(curl -s -S -w "%{http_code}" "https://www.duckdns.org/update?${DMSTR}&token=${DUCKDNS_TOKEN}${IPSTR}")

    case "$DNS_RET" in
        "OK200" ) RET_VALUE=0;;
        *       ) RET_VALUE=1;;
    esac

    echo "$DNS_RET"

    return $RET_VALUE
}

# A smart bit of trickery to see if this script is running as exe or as source
if [[ "$0" == "$BASH_SOURCE" ]]; then
    # we haven't been sourced, so run as executable
    updatedns "$@"
    exit $?
fi

